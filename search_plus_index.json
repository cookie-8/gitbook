{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction nothing copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter1/":{"url":"Chapter1/","title":"第一章 js","keywords":"","body":"第一章 js基础 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter1/基础.html":{"url":"Chapter1/基础.html","title":"基础","keywords":"","body":"基础 new 构造函数返回原始值将被忽略，按默认返回当前 this 对象, 返回对象将使得 new 操作符无用 function create(Con, ...args) { let obj = {} Object.setPrototypeOf(obj, Con.prototype) let result = Con.apply(obj, args) return result instanceof Object ? result : obj } evnetloop microTask macroTask 继承 原型继承，构造函数继承，组合继承 实现 promise import、require、export、module.exports eventEmitter class Event { constructor() { this.events = Object.create(null); } on(name, fn) { if (!this.events[name]) { this.events[name] = [] } this.events[name].push(fn); return this; } emit(name, ...args) { if (!this.events[name]) { return this; } const fns = this.events[name] fns.forEach(fn => fn.call(this, ...args)) return this; } off(name,fn) { if (!this.events[name]) { return this; } if (!fn) { this.events[name] = null return this } const index = this.events[name].indexOf(fn); this.events[name].splice(index, 1); return this; } once(name,fn) { const only = () => { fn.apply(this, arguments); this.off(name, only); }; this.on(name, only); return this; } } copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter1/ts.html":{"url":"Chapter1/ts.html","title":"ts","keywords":"","body":"ts copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter1/正则.html":{"url":"Chapter1/正则.html","title":"正则","keywords":"","body":"正则 子匹配 (), $0为整个匹配, $1为第一个子匹配... 非捕获匹配 (?:x) , 例如 /(?:foo){1,2}/ 先行断言 x(?=y) ,例如 /Jack(?=Sprat)/会匹配到'Jack'仅仅当它后面跟着'Sprat'。 后行断言 (? 例如 /(?会匹配到'Sprat'仅仅当它前面是'Jack' 正向否定查找 x(?!y) 例如 /\\d+(?!\\.)/匹配一个数仅仅当这个数后面没有跟小数点的时候 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter1/this口诀.html":{"url":"Chapter1/this口诀.html","title":"this的6种指向","keywords":"","body":"this的6种指向 世界尽头 点石成金 指腹为婚 山盟海誓 内有乾坤 军令如山 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter2/":{"url":"Chapter2/","title":"第二章 css","keywords":"","body":"第二章 css copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter2/基础知识.html":{"url":"Chapter2/基础知识.html","title":"基础知识","keywords":"","body":"基础知识 盒模型 水平垂直居中 固定宽高和不固定宽高 页面布局 两栏三栏布局 css 解析顺序 是逆向解析 css 开启硬件加速 transform translate3d flex float 元素写在正常元素的前面 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter3/":{"url":"Chapter3/","title":"第三章 框架","keywords":"","body":"第三章 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter3/react.html":{"url":"Chapter3/react.html","title":"react","keywords":"","body":"react react 推荐使用组合而不是继承 组件开发常用render props，分离render的是无状态组件 高阶组件 常用 组件参数 、 属性代理 和 反向继承 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter3/vue.html":{"url":"Chapter3/vue.html","title":"vue","keywords":"","body":"vue v-show v-show 控制显隐，是通过 js 代码去修改元素的 element style。如果 value 为 false，设置 display: none；如果 value 为 true，清除 display 属性。所以 value 为 true 时，只是将 element style 中的 display 效果清除，并不能覆盖 css 中的 display 样式。 react 和 vue 的 diff 过程有什么区别 React diff 的是 Dom，而 Vue diff 的是数据。 React：你给我一个数据，我根据这个数据生成一个全新的 Virtual DOM，然后跟我上一次生成的 Virtual DOM 去 diff，得到一个 Patch，然后把这个 Patch 打到浏览器的 DOM 上去。完事。并且这里的 Patch 显然不是完整的 Virtual DOM，而是新的 Virtual DOM 和上一次的 Virtual DOM 经过 diff 后的差异化的部分。 Vue: 在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter4/":{"url":"Chapter4/","title":"第四章 webpack","keywords":"","body":"第四章 webpack copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "},"Chapter4/打包分块.html":{"url":"Chapter4/打包分块.html","title":"第1节：打包分块","keywords":"","body":"第1节：打包分块 Bundle filename: [name]:[contenthash].js hash文件名: hash chunkhash contenthash hash针对的是每一次构建（build）而言,关心的是整体项目的变化 chunkhash该chunk所属的内容发生了变化才会改变 该哈希根据的是文件的内容 copyright reserved all right reserved，powered by Gitbook该文件修订时间： 2019-05-28 10:43:09 "}}